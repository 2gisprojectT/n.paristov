Domain-тестирование - метод тестирования, в основе которого лежит работа с областями определений.
Domain testing решает 3 основных задачи:

1.Разбиение областей значений на подобласти(невозможно протестировать на всех возможных значениях,
конфигурациях и условиях)
Происходит это следующим образом:пусть имеется некоторое поле для ввода логина и оно подразумевает 
ряд ограничений(не более 30 символов,все буквы латинские и т.д.)
Здесь начинается этап выделения классов эквивалентности.Например:в поле должны быть латинские 
символы,т.е Aa,Bb,Cc и т.д.,получается два класса:{Aa,Bb,Cc,Dd...} и !{Aa,Bb,Cc,Dd...} 
Также стоит учитывать выходные значения тестируемых параметров,поскольку в этом случае
подобласти подлежат дополнительному разбиению.

2.Выбор конкретных значений из подобластей(для минимизации риска ошибок,связанных с неверным 
выделением подобластей)
Происходит это следующим образом:random testing(любое значение),методы пропорционального разбиения
(сначала случайное значение,после логическое продолжение техники),risk-based методы(потенциально 
уязвимые места),анализ граничных значений,специальные значения(выбираются из знаний о предметной 
области) и т.д.

3.Сочетание выбранных значений разных параметров(для увеличения области покрытия,и обнаружения 
дефектов,которые зависят от взаимодействия двух и более параметров)при условии наличия 
зависимостей параметров и
Имеются 3 дефекта при сочетании значений:
-single-mode дефект - дефект,вызываемый значением/значениями одного парамера
-double-mode дефект - дефект,вызываемый значениями двух параметров
-multi-mode дефект - дефект,вызываемый значениями трех и более параметров

Пример использования domain testing:
Пусть нам необходимо протестировать калькулятор.Там имеются стандартные операции сложения,
вычитания,умножения,деления,взятия корня,процент и возведения в степень.Также пусть имеются 
4 режима работы - обычный, инженерный,программист и статистика.Т.е.
Operation={+,-,*,/,%,square,exponent}
Type={standart,engineer,programmer,statistic}
Полный  перебор даст нам 28 тестов,но поскольку мы знаем,что эти операции работают одинаково 
в каждом режиме,то можем сократить количество тестов до 7.
В итоге имеем 7 тестов вместо 28 с той же областью покрытия.

Анализировать работу каких-либо компонентов можно по выходным данным.Сверив результаты из 
нескольких режимов(любых)можно уже судить с некоторой долей достоверности об одинаковой 
работе компонента.

Плюсы метода:удобен для решения задач с большим количеством параметров,позволяет детально все 
рассмотреть без перебора всех компонентов системы

Минусы метода:может быть слишком много классов эквивалентности,ошибки при определении классов эквивалентности
(опять же и-за слишком большого размера классов)

Данный метод больше подходит к многомерным областям определения,поскольку при наличии хотя бы
3 исследуемых параметров,количество возможных вариантов для тестирования резко возрастает.Данный
метод позволяет существенно сократить количество тестов,используя сочетания параметров и их областей
значений.Но при наличии области определения,представляющей собой неупорядоченный набор данных,не 
взаимосвязанных друг с другом,метод не эффективен,поскольку каждое значение будет классом
эквивалентности и придется использовать обыкновенный перебор.
неоднородность этих классов
Также следует отметить в качестве ограничения неоднородность этих классов
(например,есть класс эквиваленности с валидными значениями(латинские буквы в логине),и 
другой класс эквивалентности с невалидными значениями(что угодно,начиная от знаков,заканчивая 
китайскими иероглифами))
